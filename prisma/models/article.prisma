enum ArticleStatus {
  incomplete
  newsubmission
  inpress
  editorinvited
  needtoassigneditor
  needtoassignreviewer
  reviewerinvited
  submissionneedadditionalreviewers
  submissionwithrequiredreviewerscompleted
  underreview
  decisioninprocess
  accepted
  rejected
  revise
  senttoauthor
  noreviewcompleted
  onereviewcompleted
  tworeviewcompleted
  threereviewcompleted
  fourormorereviewcompleted
  revisiondue
}

model IntoArticle {
  intro_id       Int              @id @default(autoincrement())
  case_number    String?          @unique
  type           String
  title          String?          @db.VarChar(500)
  abstract       String?          @db.Text
  keywords       String?          @db.VarChar(500)
  sub_class      String           @db.VarChar(200)
  pages          Int?
  belong_to      String?          @db.VarChar(200)
  article_status ArticleStatus    @default(incomplete)
  main_author    Int
  istick         Boolean          @default(false)
  mainAuthor     Author           @relation(fields: [main_author], references: [author_id])
  revision_round Int              @default(0)
  articleAuthors ArticleAuthor[]
  ArticleDetails ArticleDetails[]
  AssignEditor   AssignEditor[]
  AssignReviewer AssignReviewer[]
  AssignAdmin    AssignAdmin[]
  ArticleSection ArticleSection[]
  Reffences      Reffences[]

  @@map("into_article")
}

model ArticleDetails {
  article_id        Int         @id
  cover_letter      String      @db.MediumText
  cover_letter_file String?     @db.VarChar(500)
  isFunding         String      @db.Text
  isMaterial        Boolean?
  materialFile      String?     @db.VarChar(500)
  isCoding          Boolean?
  codeFile          String?     @db.VarChar(500)
  isData            Boolean?
  dataFile          String?     @db.VarChar(500)
  isHuman           String?     @db.VarChar(500)
  isBoradApproval   String?     @db.VarChar(50)
  approvalDetails   String?     @db.Text
  manuscript_file   String?     @db.VarChar(500)
  istick            Boolean     @default(false)
  Article           IntoArticle @relation(fields: [article_id], references: [intro_id], onDelete: Cascade)

  @@map("article_details")
}

model ArticleAuthor {
  article_id Int
  author_id  Int
  isMain     Boolean     @default(false)
  status     String?     @db.VarChar(100)
  istick     Boolean     @default(false)
  article    IntoArticle @relation(fields: [article_id], references: [intro_id])
  author     Author      @relation(fields: [author_id], references: [author_id])

  @@id([article_id, author_id])
  @@map("article_authors")
}

enum reviewerType {
  suggested
  oppose
}

// Artcile Section ---
model ArticleSection {
  section_id          Int         @id @default(autoincrement())
  article_id          Int
  section_title       String
  Section_description String?     @db.MediumText
  istick              Boolean     @default(false)
  refCount            Int?
  introArticle        IntoArticle @relation(fields: [article_id], references: [intro_id])
}

model Reffences {
  ref_id            Int    @id @default(autoincrement())
  article_id        Int
  reffrence_html_id String
  reffrence         String @db.Text

  article IntoArticle @relation(fields: [article_id], references: [intro_id])

  @@map("article_refferences")
}

// Assigned Editor
enum Decision {
  accept
  reject
  MinorRevision @map("minor revision")
  MajorRevision @map("major revision")
}

enum InviteStatus {
  invited
  accepted
  rejected
}

model AssignEditor {
  editor_id     Int
  article_id    Int
  no_days       Int?
  is_accepted   InviteStatus @default(invited)
  is_completed  Boolean      @default(false)
  comments      String?      @db.Text
  editor_file   String?      @db.VarChar(500)
  main_decision Decision?
  attacth_file  String?      @db.VarChar(500)
  reminder_date String?
  to_show       String?      @db.VarChar(200)
  round         Int          @default(1)

  editor  Editor      @relation(fields: [editor_id], references: [editor_id])
  article IntoArticle @relation(fields: [article_id], references: [intro_id])

  @@id([editor_id, article_id])
  @@map("assign_editor")
}

// Assigned Reviewer 
model AssignReviewer {
  reviewer_id      Int
  article_id       Int
  reviewer_type    reviewerType @default(suggested)
  is_accepted      InviteStatus @default(invited)
  is_completed     Boolean      @default(false)
  is_under_scope   Boolean?
  is_need_revision Boolean?
  editor_comment   String?      @db.Text
  comment          String?      @db.Text
  no_days          Int?
  attach_file      String?      @db.VarChar(500)
  reviewerDecision Decision?
  reminder_date    String?
  round            Int          @default(1)

  reviewer Reviewer    @relation(fields: [reviewer_id], references: [reviewer_id])
  article  IntoArticle @relation(fields: [article_id], references: [intro_id])

  @@id([reviewer_id, article_id])
  @@map("assign_reviewer")
}

// Assign Admin 
model AssignAdmin {
  admin_id      Int
  article_id    Int
  comments      String?   @db.Text
  admin_file    String?   @db.VarChar(500)
  main_decision Decision?
  to_show       String?   @db.VarChar(200)
  round         Int       @default(1)

  admin   SuperAdmin  @relation(fields: [admin_id], references: [admin_id])
  article IntoArticle @relation(fields: [article_id], references: [intro_id])

  @@id([admin_id, article_id, round])
  @@map("assign_admin")
}

model publishedArticle {
  published_id Int    @id @default(autoincrement())
  journal_name String
  volume       Int
  year         Int
  issue        Int
  title        String
  abstract     String @db.Text

  @@map("published_article")
}
